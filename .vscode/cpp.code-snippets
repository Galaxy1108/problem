{
	// Place your problem 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"头注释-luogu": {
		"prefix": "mhluogu",
		"body": [
		  "/**",
		  " * @name ${1}",
		  " * @link https://www.luogu.com.cn/problem/${TM_FILENAME_BASE/(^P)(\\\\d+)/$2/} ${3}",
		  " * @par tags",
		  " * #${2}",
		  " */",
		  "",
		  "${0}",
		],
		"description": "头注释-luogu"
	},
	"头注释-CF": {
		"prefix": "mhcf",
		"body": [
		  "/**",
		  " * @name ${1}",
		  " * @link ${TM_FILENAME_BASE/^CF(\\d+)(.*)$/https:\\/\\/codeforces.com\\/problemset\\/problem\\/$1\\/$2/} ${3}",
		  " * @par tags",
		  " * #${2}",
		  " */",
		  "",
		  "${0}",
		],
		"description": "头注释-CF"
	},
	"头注释-AT": {
		"prefix": "mhat",
		"body": [
		  "/**",
		  " * @name ${1}",
		  " * @link https://atcoder.jp/contests/${TM_FILENAME_BASE/at_(.+)_([A-Za-z])/$1/}/tasks/${TM_FILENAME_BASE/at_(.+)_([A-Za-z])/${1:lower}_${2:lower}/} ${3}",
		  " * @par tags",
		  " * #${2}",
		  " */",
		  "",
		  "${0}",
		],
		"description": "头注释-AT"
	},
	"缺省源": {
		"prefix": "mhead",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "int main() {",
		  "    ${0://code here}",
		  "}"
		],
		"description": "缺省源"
	},
	"循环": {
		"prefix": "mfor",
		"body": [
			"for (${1|int,long long,ll|} ${2:i} = ${3:1};${2} ${4:<=} ${5:n};${2}++) {",
			"    ${0://code here}",
			"}"
		],
		"description": "循环"
	},
	"快读": {
		"prefix": "mfread",
		"body": [
			"namespace FastIO {",
			"#define il inline",
			"    const int iL = 1 << 25;",
			"    char ibuf[iL], * iS = ibuf + iL, * iT = ibuf + iL;",
			"#define GC() (iS == iT) ? \\",
			" (iT = (iS = ibuf) + fread(ibuf, 1, iL, stdin), (iS == iT) ? EOF : *iS++) : *iS++",
			"    template <class T>il void read(T& x) {",
			"        x = 0;",
			"        char c = GC(); bool flg = false;",
			"        while (!isdigit(c)) { flg |= c == '-'; c = GC(); }",
			"        while (isdigit(c)) { x = (x << 1) + (x << 3) + (c & 15); c = GC(); }",
			"        if (flg) x = -x;",
			"    }",
			"    char Out[iL], * iter = Out;",
			"#define Flush() fwrite(Out, 1, iter - Out, stdout); iter = Out",
			"    template <class T>il void write(T x, char LastChar = '\\n') {",
			"        int c[35], len = 0;",
			"        if (x < 0) { *iter++ = '-'; x = -x; }",
			"        do { c[++len] = x % 10; x /= 10; } while (x);",
			"        while (len) *iter++ = c[len--] + '0';",
			"        *iter++ = LastChar; Flush();",
			"    }",
			"}",
			""
		],
		"description": "快读"
	},
	"快速幂": {
		"prefix": "mfpow",
		"body": [
			"${1|ll,long long,int|} fast_pow(${1} a, ${1} b) {",
			"    ${1} anss = 1;",
			"    while (b) {",
			"        if (b & 1) {",
			"            anss = (anss * a) ${2|% mod,% 998244353,% 1000000007|};",
			"        }",
			"        a = (a * a) ${2};",
			"        b >>= 1;",
			"    }",
			"    return anss;",
			"}",
			""
		],
		"description": "快速幂"
	},
	"文件读写": {
		"prefix": "mfreopen",
		"body": [
			"freopen(\"${TM_FILENAME_BASE}.in\", \"r\", stdin);",
			"freopen(\"${TM_FILENAME_BASE}.out\", \"w\", stdout);"
		],
		"description": "文件读写"
	}
}